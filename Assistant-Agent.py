from autogen import ConversableAgent, UserProxyAgent, initiate_chats

config_list = [{
    # Let's choose the model
    "model": "qwen2.5:latest",
    "base_url": "http://localhost:11434/v1",
    "api_key": "ollama",
}]



#Manager Proxy Agent
manager_proxy_agent = UserProxyAgent(
    name="Manager",
    system_message="You are a marketing manager. Your role is to provide campaign topics and evaluate the ideas and scripts generated by creative team.",
    code_execution_config=False,
    llm_config={
        "config_list": config_list
    },
    human_input_mode="NEVER"
)

#Idea Generator Agent
idea_generator = ConversableAgent(
    name="Idea_Generator",
    system_message="""You are a creative marketing expert. Your role is to: 
    1. Generate innovative campaign ideas based on the given topic 
    2. Suggest potential storylines and characters for video content 
    3. Provide a brief outline for each idea 
    Present 3-5 unique ideas for each request.""",
    llm_config={
        "config_list": config_list
    },
    human_input_mode="NEVER"
)

#Script Writer Agent
script_writer = ConversableAgent(
    name="Script_Writer",
    system_message="""You are an expert script writer for marketing videos. Your role is to: 
    1. Develop full scripts based on the provided campaign ideas 
    2. Include dialogue, scene descriptions, and camera directions 
    3. Ensure the script aligns with the campaign objectives and target audience 
    Aim for scripts of 2-3 minutes in length.""",
    llm_config={
        "config_list": config_list
    },
    human_input_mode="NEVER"
)

#Script Reviewer Agent
script_reviewer = ConversableAgent(
    name="Script_Reviewer",
    system_message="""You are a critical script reviewer. Your role is to: 
    1. Analyze scripts for effectiveness, engagement, and alignment with campaign goals 
    2. Provide constructive feedback on dialogue, pacing and overall structure 
    3. Suggest improvements or alternatives where necessary 
    4. Ensure the script adheres to brand guidelines and target audience preferences 
    Be thorough and specific in your feedback.""",
    llm_config={
        "config_list": config_list
    },
    human_input_mode="NEVER"
)

#Add tasks for the agents
chats = [
    {
        "sender": manager_proxy_agent,
        "recipient": idea_generator,
        "message": 
            "Hello, I need creative ideas for our new marketing campaign. "
            "Our product is eco-friendly home cleaning products. "
            "Could you generate 3-5 innovative campaign ideas, including potential "
            "storylines and characters for video content?",
        "summary_method": "reflection_with_llm",
        "summary_args": {
            "summary_prompt": "Summarize the generated ideas "
            "into a JSON object: "
            "{'idea1': {'concept': '', 'storyline': '', 'characters': ''}, "
            "'idea2': {...}, 'idea3': {...}}",
            
        },
        "max_turns": 2,
        "clear_history": True
    },
    {
        "sender": manager_proxy_agent,
        "recipient": script_writer,
        "message": 
            "Great Ideas! Let's develop a script for the following concept: "
            "[INSERT SELECTED IDEA HERE]. "
            "Please write a full script including dialogue, scene descriptions, "
            "and camera directions. Aim for 2-3 minute video.",
        "summary_method": "reflection_with_llm",
        "summary_args": {
            "summary_prompt": "Provide a brief summary for the script "
            "as a JSON object: "
            "{'title': '', 'main_characters': [], 'key_scenes': [], "
            "'estimated_duration': ''}",
            
        },
        "max_turns": 1,
        "clear_history": False
    },
    
    {
        "sender": manager_proxy_agent,
        "recipient": script_reviewer,
        "message": 
            "Plase review the following script: [INSERT SCRIPT HERE]. "
            "Analyze it for effectiveness, engagement, and alignment with "
            "Our eco-friendly cleaning products campaign. Provide constructive "
            "feedback and suggest improvements.",
        "summary_method": "reflection_with_llm",
        "summary_args": {
            "summary_prompt": "Summarize the review points "
            "as a JSON object: "
            "{'strengths': '', 'weaknesses': [], 'suggestions': []}"
            
        },
        "max_turns": 1,
    },
    
    {
        "sender": manager_proxy_agent,
        "recipient": manager_proxy_agent,
        "message": 
            "Based on the script and review, decide if the script is ready "
            "for production or needs revisions. If revisions are needed, "
            "Specify the key areas to address.",
        "max_turns": 1,
        "summary_method": "reflection_with_llm",
        "summary_args": {
            "summary_prompt": "Summarize the decision "
            "as a JSON object: "
            "{'decision': 'ready'/'needs_revision', "
            "'key_revision_areas': []}"
            
        },
    },
    
]

#Start researching
chat_results = initiate_chats(chats)

for chat_result in chat_results:
    print(chat_result.summary)
    print("\n")
    
for chat_result in chat_results:
    print(chat_result.cost)
    print("\n")